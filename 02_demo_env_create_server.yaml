---
- hosts: all
  gather_facts: false
  tasks:

    ## forti server
    - name: Collect eni info
      amazon.aws.ec2_eni_info:
        region: "{{ region }}"
        filters:
          "tag:role": "{{ senario_name }}"
      register: eni

    - debug: var=eni.network_interfaces

    - set_fact:
        forti_enis:
          - "{{ eni.network_interfaces | community.general.json_query(query1) | join('')}}"
          - "{{ eni.network_interfaces | community.general.json_query(query2) | join('')}}"
          - "{{ eni.network_interfaces | community.general.json_query(query3) | join('')}}"
      vars:
        query1: "[?private_ip_address=='{{ ips.forti.port0 }}'].network_interface_id"
        query2: "[?private_ip_address=='{{ ips.forti.port1 }}'].network_interface_id"
        query3: "[?private_ip_address=='{{ ips.forti.port2 }}'].network_interface_id"

    - debug: var=forti_enis

    - set_fact:
        client_enis:
          - "{{ eni.network_interfaces | community.general.json_query(query1) | join('')}}"
          - "{{ eni.network_interfaces | community.general.json_query(query2) | join('')}}"
      vars:
        query1: "[?private_ip_address=='{{ ips.forti_clients.srv1 }}'].network_interface_id"
        query2: "[?private_ip_address=='{{ ips.forti_clients.srv2 }}'].network_interface_id"

    - debug: var=client_enis

    - set_fact:
        eips: "{{ eni.network_interfaces | community.general.json_query(query) }}"
      vars:
        query: "[?private_ip_address=='{{ ips.forti.port0 }}'].private_ip_addresses"

    - set_fact:
        forti_eip: "{{ eips[0] | community.general.json_query(query1) }}"
        client1_eip: "{{ eips[0] | community.general.json_query(query2) }}"
        client2_eip: "{{ eips[0] | community.general.json_query(query3) }}"
      vars:
        query1: "[?private_ip_address=='{{ ips.forti.port0 }}'].association.public_ip"
        query2: "[?private_ip_address=='{{ ips.forti.port0_secondary1 }}'].association.public_ip"
        query3: "[?private_ip_address=='{{ ips.forti.port0_secondary2 }}'].association.public_ip"

    - debug:
        msg:
          - "{{ forti_eip[0] }}"
          - "{{ client1_eip[0] }}"
          - "{{ client2_eip[0] }}"

    - name: create fortios server
      amazon.aws.ec2_instance:
        name: "{{ senario_name }}-fortios"
        key_name: "{{ senario_name }}-key"
        instance_type: c4.xlarge
        network:
          interfaces:
            - id: "{{ forti_enis[0] }}"
            - id: "{{ forti_enis[1] }}"
            - id: "{{ forti_enis[2] }}"
        image_id: "{{ amis.fortigate }}"
        tags:
          role: "{{ senario_name }}"
        region: "{{ region }}"
        state: present
        wait: true
      register: ret_fortios

    - debug: var=ret_fortios

    - name: create client1
      amazon.aws.ec2_instance:
        name: "{{ senario_name }}-client-server1"
        key_name: "{{ senario_name }}-key"
        instance_type: t3.small
        network:
          interfaces:
            - id: "{{ client_enis[0] }}"
        image_id: "{{ amis.centos9s }}"
        tags:
          role: "{{ senario_name }}"
        region: "{{ region }}"
        state: present
        wait: true
      register: ret_client1

    - debug: var=ret_client1

    - name: create client2
      amazon.aws.ec2_instance:
        name: "{{ senario_name }}-client-server2"
        key_name: "{{ senario_name }}-key"
        instance_type: t3.small
        network:
          interfaces:
            - id: "{{ client_enis[1] }}"
        image_id: "{{ amis.centos9s }}"
        tags:
          role: "{{ senario_name }}"
        region: "{{ region }}"
        state: present
        wait: true
      register: ret_client2

    - debug: var=ret_client2

    - name: create fortios inventoy
      copy:
        dest: inventory_demo_fortigate
        content: |
          [fortios]
          {{ forti_eip[0] }} ansible_user=admin ansible_password={{ fortios_password }} ansible_network_os=fortinet.fortios.fortios ansible_connection=httpapi

    - name: create client inventoy
      copy:
        dest: inventory_demo_clients
        content: |
          [clients]
          {{ client1_eip[0] }} ansible_user=ec2-user ansible_ssh_private_key_file=ansible-firewall-demo-key.pem
          {{ client2_eip[0] }} ansible_user=ec2-user ansible_ssh_private_key_file=ansible-firewall-demo-key.pem

    ## panos server
    - name: Collect eni info
      amazon.aws.ec2_eni_info:
        region: "{{ region }}"
        filters:
          "tag:role": "{{ senario_name }}"
      register: eni

    - debug: var=eni.network_interfaces

    - set_fact:
        panos_enis:
          - "{{ eni.network_interfaces | community.general.json_query(query) | join('')}}"
      vars:
        query: "[?private_ip_address=='{{ ips.panos.port0 }}'].network_interface_id"

    - debug: var=panos_enis

    - set_fact:
        eips: "{{ eni.network_interfaces | community.general.json_query(query) }}"
      vars:
        query: "[?private_ip_address=='{{ ips.panos.port0 }}'].private_ip_addresses"

    - set_fact:
        panos_eip: "{{ eips[0] | community.general.json_query(query) }}"
      vars:
        query: "[?private_ip_address=='{{ ips.panos.port0 }}'].association.public_ip"

    - debug:
        msg:
          - "{{ panos_eip[0] }}"

    - name: create fortios server
      amazon.aws.ec2_instance:
        name: "{{ senario_name }}-panos"
        key_name: "{{ senario_name }}-key"
        instance_type: c5n.xlarge
        network:
          interfaces:
            - id: "{{ panos_enis[0] }}"
        image_id: "{{ amis.panos }}"
        tags:
          role: "{{ senario_name }}"
        region: "{{ region }}"
        state: present
        wait: true
      register: ret_panos

    - debug: var=ret_panos

    - name: create panos inventoy
      copy:
        dest: inventory_demo_fortigate
        content: |
          [fortios]
          {{ forti_eip[0] }} ansible_user=admin ansible_password={{ fortios_password }} ansible_network_os=fortinet.fortios.fortios ansible_connection=httpapi

    - name: create client inventoy
      copy:
        dest: inventory_demo_palo
        content: |
          [panos]
          localhost ansible_connection=local panos_url={{ panos_eip[0] }} panos_user=admin panos_password={{ panos_password }}

    - name: "wait for FortiOS admin page to come up"
      uri:
        url: "https://{{ forti_eip[0] }}"
        validate_certs: false
        status_code: 200
      register: result
      until: result.status == 200
      retries: 300
      delay: 10

    - name: "wait for Panos admin page to come up"
      uri:
        url: "https://{{ panos_eip[0] }}"
        validate_certs: false
        status_code: 200
      register: result
      until: result.status == 200
      retries: 300
      delay: 30

    - debug:
        msg:
          - "FortiGate"
          - "  fortios: {{ forti_eip[0] }}"
          - "  instance_id(initial password): {{ ret_fortios.instances[0].instance_id }}"
          - "  change this password: {{ fortios_password }}"
          - ""
          - "PaloAlto"
          - "  panos: {{ panos_eip[0] }}"
          - "  change this password: {{ panos_password }}"
          - ""
          - "Web Server"
          - "  web server1 ip: {{ client1_eip[0] }}"
          - "  web server2 ip: {{ client2_eip[0] }}"
